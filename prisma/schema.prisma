// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-kysely"
  output       = "../src/models"
  fileName     = "types.ts"
  enumFileName = "enum.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email             String            @id
  name              String?
  password          String?
  role              String?
  location          Location          @relation(fields: [locationLatitude, locationLongitude], references: [latitude, longitude])
  birth_date        DateTime?
  phoneNumber       String?
  records           Record[]
  allergies         AllergyMedicine[]
  treatments        TreatmentUser[]
  labResults        LabResultUser[]
  locationLatitude  Decimal
  locationLongitude Decimal
}

model Record {
  id           String           @default(uuid()) @id
  doctorEmail  String
  patientEmail String
  createdAt    DateTime         @default(now())
  description  String?
  diagnose     Diagnose?        @relation(fields: [diagnoseId], references: [id])
  patient      User             @relation(fields: [patientEmail], references: [email])
  medicines    MedicineRecord[]
  diagnoseId   String?
}

model Medicine {
  id              String            @id @default(uuid())
  name            String
  records         MedicineRecord[]
  AllergyMedicine AllergyMedicine[]
}

model Diagnose {
  id       String   @id @default(uuid())
  name     String
  category String
  records  Record[]
}

model MedicineRecord {
  recordId   String
  medicineId String
  dose       String
  record     Record   @relation(fields: [recordId], references: [id])
  medicine   Medicine @relation(fields: [medicineId], references: [id])

  @@id([recordId, medicineId])
}

model AllergyMedicine {
  patientEmail String
  medicineId   String
  diagnosedAt  DateTime @default(now())
  patient      User     @relation(fields: [patientEmail], references: [email])
  medicine     Medicine @relation(fields: [medicineId], references: [id])

  @@id([patientEmail, medicineId])
}

model TreatmentCategory {
  id         String          @id @default(uuid())
  category   String
  treatments TreatmentUser[]
}

model TreatmentUser {
  id           String            @id @default(uuid())
  category     String
  patientEmail String
  treatmentAt  DateTime          @default(now())
  description  String?
  doctorEmail  String
  categoryType TreatmentCategory @relation(fields: [category], references: [id])
  patient      User              @relation(fields: [patientEmail], references: [email])
}

model LabResultCategory {
  id         String          @id @default(uuid())
  category   String
  labResults LabResultUser[]
}

model LabResultUser {
  id                  String            @id @default(uuid())
  category            String
  patientEmail        String
  result_document_URL String
  description         String?
  doctorEmail         String
  categoryType        LabResultCategory @relation(fields: [category], references: [id])
  patient             User              @relation(fields: [patientEmail], references: [email])
}

model Location {
  latitude  Decimal
  longitude Decimal
  User      User[]

  @@id([latitude, longitude])
}
